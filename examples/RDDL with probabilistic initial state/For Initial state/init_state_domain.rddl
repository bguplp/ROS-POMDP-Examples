//

domain init_domain {

types {
	robot: object;
	obj: object;
	discrete_location: object;
	floor: object;
	enum_level : { @opt1 , @opt2 , @opt3 }; // An enumerated type
};

pvariables {
	act : { action-fluent, bool, default = false };
	near(robot,discrete_location) : {state-fluent, bool, default = false };
	hand_empty(robot) : {state-fluent, bool, default = true };
	pickable(obj) : {state-fluent, bool, default = false };
	object_at(obj,discrete_location) : {state-fluent, bool, default = false };
	at_floor(discrete_location,floor) : {non-fluent, bool, default = false };
	goal_reached : {state-fluent, bool, default = false };
	opt : {interm-fluent, enum_level, level = 1};
	obsrv_illegal_action: { observ-fluent , bool};
	obsrv_observe_can : { observ-fluent , int};
	obsrv_move_to_point : { observ-fluent , int};};
	
	
cpfs {
	opt = Discrete ( enum_level ,
		@opt1 :  0.37 ,
		@opt2 : 0.4 ,
		@opt3 : 0.23
		);
	object_at'(?obj_1,?discrete_location_2)= switch (opt) {
		case @opt1 : if((?obj_1 == $can) ^ (?discrete_location_2 == $robot_lab)) then true else object_at(?obj_1,?discrete_location_2),
		case @opt2 : if(?obj_1==$can ^ ?discrete_location_2==$office) then true else object_at(?obj_1,?discrete_location_2),
		case @opt3 : if(?obj_1==$can ^ ?discrete_location_2==$robot_lab) then true else object_at(?obj_1,?discrete_location_2)
		};
	near'(?robot,?discrete_location_2)= switch (opt) {
		case @opt1 : if(?robot==$armadillo ^ ?discrete_location_2==$office) then true else near(?robot,?discrete_location_2),
		case @opt2 : if(?robot==$armadillo ^ ?discrete_location_2==$robot_lab) then true else near(?robot,?discrete_location_2),
		case @opt3 : if(?robot==$armadillo ^ ?discrete_location_2==$robot_lab) then true else near(?robot,?discrete_location_2)
		};
	pickable'(?obj_1)=pickable(?obj_1);
	goal_reached'=goal_reached;
	obsrv_move_to_point=KronDelta(1 + 0);
	obsrv_illegal_action=false;
	obsrv_observe_can=KronDelta(1 + 0);
	hand_empty'(?robot_1)=hand_empty(?robot_1);};
	
reward=
	0;

}
